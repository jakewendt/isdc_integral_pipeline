#!/bin/csh -f

echo "###############################################################################"
echo "#######"
echo "#######     RUNNING THE UNIT TEST FOR COMPONENT CONSSSA"
echo "#######"
echo "###############################################################################"

set system = "consssa"

source unittest.setup.csh
if ( $status != 0 ) exit $status

set OUTREF_TGZ    = "consssa-2.2_outref.tar.gz"

eval `/usr/bin/envv set SSA_UNIT_TEST TRUE`
echo "#######     SSA_UNIT_TEST now set to ${SSA_UNIT_TEST}"

setenv ISDC_REF_CAT "/isdc/arc/rev_2/cat/hec/gnrl_refr_cat_0025.fits[1]"
echo "#######     ISDC_REF_CAT is now $ISDC_REF_CAT"

#	Set instruments outside this "if block" bc needed later even if "if block" not run
	set instruments = ( "jmx1" "jmx2" "picsit" "omc" "isgri" )
#	set instruments = ( "jmx1" "picsit" "omc" "isgri" )	#	jemx2 currently core dumps
#	set instruments = ( "isgri" )
#	set instruments = ( "picsit" )
#	set instruments = ( "isgri" "picsit" )
#	set instruments = ( "isgri" "picsit" "omc" )
#	set instruments = ( "jmx1" "jmx2" )
#	set instruments = ( "jmx1" )
#	set instruments = ( "jmx2" )	#	jmx2 core dumps in j_ima_iros
#	set instruments = ( "omc" )

if ( ! $?DO_NOT_RECREATE_DATA ) then
	
#	setenv DO_NOT_USE_LINKS

	source unittest.data.csh
	if ( $status != 0 ) exit $status

	#	must build the ISDC_SITE because cons_ssa_start.sh needs it
	echo "#######     Creating ISDC_SITE"
	echo "#######     ISDC_SITE is now $ISDC_SITE "
	eval `/usr/bin/envv set ISDC_SITE ${PWD}/ISDC_SITE`
	echo "#######     ISDC_SITE is now $ISDC_SITE "
	/bin/mkdir -p ${PWD}/ISDC_SITE/run/pipelines/cons
	/bin/ln -s ../../../../opus_work/consssa ${PWD}/ISDC_SITE/run/pipelines/cons/
	/bin/ln -s ../../../../opus_work/opus    ${PWD}/ISDC_SITE/run/pipelines/cons/

	echo "#######     Creating test data"
	chdir test_data

	/bin/ln -s /isdc/arc/rev_2/aux
	/bin/ln -s /isdc/arc/rev_2/scw

	chdir ..
	/bin/mkdir -p opus_work/consssa/input/

	#	/bin/mkdir $REP_BASE_PROD/obs_isgri/
	#	/bin/mkdir $REP_BASE_PROD/obs_picsit/
	#	/bin/mkdir $REP_BASE_PROD/obs_spi/
	#	/bin/mkdir $REP_BASE_PROD/obs_omc/
	#	/bin/mkdir $REP_BASE_PROD/obs_jmx/
	#	/bin/cp -r $REP_BASE_PROD/../outref/obs_isgri/002*  $REP_BASE_PROD/obs_isgri/
	#	/bin/cp -r $REP_BASE_PROD/../outref/obs_picsit/002* $REP_BASE_PROD/obs_picsit/
	#	/bin/cp -r $REP_BASE_PROD/../outref/obs_spi/002*    $REP_BASE_PROD/obs_spi/
	#	/bin/cp -r $REP_BASE_PROD/../outref/obs_omc/002*    $REP_BASE_PROD/obs_omc/
	#	/bin/cp -r $REP_BASE_PROD/../outref/obs_jmx/002*    $REP_BASE_PROD/obs_jmx/

	#	because cons_ssa_start.sh parses the output of dal_dump
	#	and the stuff that would go to this log confuses it.
	unsetenv COMMONLOGFILE

	#	Need ftools in cons_ssa_start.sh
	if ( -e $HEADAS/headas-init.csh ) then
		source $HEADAS/headas-init.csh
	else if ( -e $LHEASOFT/lhea-init.csh ) then
		source $LHEASOFT/lhea-init.csh 
	endif
	foreach instrument ( $instruments )
		cons_ssa_start.sh --min_duration 700 --max_duration 2164 --instruments $instrument 0044
	end
endif	#	if ( ! $?DO_NOT_RECREATE_DATA ) then
#	
#	\rm opus_work/consssa/input/*trigger
#	foreach scwid
#	foreach scwid ( 021600160010 021600170010 021600200010 021600210010 021600220010 021600230010 021600240010 021600250010 )
#			touch opus_work/consssa/input/${scwid}_isgri.trigger
#	end
#	
######################################################################
#  Now we're ready to run:
#
#  Find out what data should be run by looking in OPUS_WORK/consssa/input

echo "#######     "
echo "#######     Looping over ssa triggers in opus_work/consssa/input"
/bin/ls -1 opus_work/consssa/input/*trigger

#	Create the mosaic trigger now, because this'll all get cleaned up in the processing
foreach sciencewindow ( `/bin/ls -1 opus_work/consssa/input/*_*.trigger | /bin/awk -F/ '{print $NF}' | /bin/awk -F_ '{print $1}' | /usr/bin/uniq` )
	echo $sciencewindow >> opus_work/TestMosaic.trigger
end

foreach trigger (`/bin/ls opus_work/consssa/input/*trigger | /bin/awk -F. '{print $1}' | /bin/awk -F/ '{print $4}' | /bin/sort`)
	echo "#######     Running process_consssa_trigger.csh $trigger"
	$ISDC_OPUS/consssa/unit_test/process_consssa_trigger.csh $trigger
	@ exit_status = $status 
	echo "#######     exit status from process_consssa_trigger.csh was $exit_status"
	if ( $exit_status > 0 ) exit 1
end  # foreach trigger








set instruments = ( "jmx1" "picsit" "omc" "isgri" )







set instruments = ( $instruments "spi" )

foreach instrument ( $instruments )
#	echo "004400120010" >> opus_work/consssa/input/0044_TestMosaic_${instrument}.trigger
#	echo "004400850010" >> opus_work/consssa/input/0044_TestMosaic_${instrument}.trigger
#	echo "004400930010" >> opus_work/consssa/input/0044_TestMosaic_${instrument}.trigger
	cp opus_work/TestMosaic.trigger opus_work/consssa/input/0044_TestMosaic_${instrument}.trigger
end


echo "#######     "
echo "#######     Looping over sma triggers in opus_work/consssa/input"
/bin/ls -1 opus_work/consssa/input/*trigger

foreach trigger (`/bin/ls opus_work/consssa/input/*trigger | /bin/awk -F. '{print $1}' | /bin/awk -F/ '{print $4}' | /bin/sort`)
	echo "#######     Running process_consssa_trigger.csh $trigger"
	$ISDC_OPUS/consssa/unit_test/process_consssa_trigger.csh $trigger
	@ exit_status = $status 
	echo "#######     exit status from process_consssa_trigger.csh was $exit_status"
	if ( $exit_status > 0 ) exit 1
end  # foreach trigger

foreach osf ( `osf_test -p consssa.path -pr dataset`)
	set command = "cleanup.pl --path=consssa --dataset=$osf --level=opus --do_not_confirm"
	echo "#######     Running $command"
	$command
	if ( $exit_status > 0 ) exit 1
end

echo "#######     "
echo "###############################################################################"
echo "#######     "
echo "#######     Processing complete.  Moving results to out..."
echo "#######     "

#  move opus_work stuff to check that cleanup.pl worked
#  (don't move pfiles as may be diff and aren't cleaned anyway)
/bin/mkdir -p out/opus_work/consssa
/bin/mv opus_work/consssa/input   out/opus_work/consssa
/bin/mv opus_work/consssa/logs    out/opus_work/consssa
/bin/mv opus_work/consssa/scratch out/opus_work/consssa
/bin/mv opus_work/consssa/obs     out/opus_work/consssa

if ( ! -e out ) /bin/mkdir -p out
/bin/mv test_data/obs* out

cd out
foreach ogid ( `/bin/ls -d obs_*/s* obs_*/0*/s*` ) 
	/bin/mkdir -p ../test_data/$ogid/logs
	/bin/chmod    +w $ogid
	/bin/chmod -R +w $ogid/logs

	if ( $ogid =~ *spi* ) then
		echo "#######     Moving out $ogid/source_res.fits (potentially different every time)"
		if ( -e $ogid/source_res.fits.gz ) then
			/bin/chmod +w $ogid/source_res.fits.gz
			/bin/mv       $ogid/source_res.fits.gz ../test_data/$ogid/
		else
			echo "#######     NO $ogid/source_res.fits found\!"
		endif
	endif

	echo "#######     Moving out $ogid logs (different every time)"
	/bin/mv $ogid/logs/* ../test_data/$ogid/logs/

	echo "#######     Write-protecting $ogid"
	/bin/chmod -w $ogid
end	#	foreach obs_spi
cd ..

echo "#######     "
echo "#######     ALL DONE"

exit

#	last line
