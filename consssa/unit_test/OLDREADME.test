#!/bin/csh -f

echo "###############################################################################"
echo "#######"
echo "#######     RUNNING THE UNIT TEST FOR COMPONENT CONSSSA"
echo "#######"
echo "###############################################################################"

set system = "consssa"

source unittest.setup.csh
if ( $status != 0 ) exit $status

set OUTREF_TGZ    = "consssa-1.9_outref.tar.gz"

eval `/usr/bin/envv set SSA_UNIT_TEST TRUE`
echo "#######     SSA_UNIT_TEST now set to ${SSA_UNIT_TEST}"

setenv ISDC_REF_CAT "/isdc/arc/rev_2/cat/hec/gnrl_refr_cat_0020.fits[1]"	#	050405 - Jake
echo "#######     ISDC_REF_CAT is now $ISDC_REF_CAT"

if ( ! $?DO_NOT_RECREATE_DATA ) then
	
	source unittest.data.csh
	if ( $status != 0 ) exit $status

	echo "#######     Creating test data"
	chdir test_data

	/bin/ln -s /isdc/arc/rev_2/aux
	/bin/ln -s /isdc/arc/rev_2/scw

	chdir ..
	/bin/mkdir -p opus_work/consssa/input/

	#	/bin/mkdir $REP_BASE_PROD/obs_isgri/
	#	/bin/mkdir $REP_BASE_PROD/obs_picsit/
	#	/bin/mkdir $REP_BASE_PROD/obs_spi/
	#	/bin/mkdir $REP_BASE_PROD/obs_omc/
	#	/bin/mkdir $REP_BASE_PROD/obs_jmx/
	#	/bin/cp -r $REP_BASE_PROD/../outref/obs_isgri/002*  $REP_BASE_PROD/obs_isgri/
	#	/bin/cp -r $REP_BASE_PROD/../outref/obs_picsit/002* $REP_BASE_PROD/obs_picsit/
	#	/bin/cp -r $REP_BASE_PROD/../outref/obs_spi/002*    $REP_BASE_PROD/obs_spi/
	#	/bin/cp -r $REP_BASE_PROD/../outref/obs_omc/002*    $REP_BASE_PROD/obs_omc/
	#	/bin/cp -r $REP_BASE_PROD/../outref/obs_jmx/002*    $REP_BASE_PROD/obs_jmx/


#	Is there anyway to use cons_ssa_start here instead of all this touching?

	/bin/cp $ISDC_OPUS/consssa/unit_test/0021_cyg_74_partial.trigger opus_work/consssa/input/0021_cyg_74_partial_spi.trigger
	
	/bin/touch opus_work/consssa/input/002400050010_omc.trigger
	/bin/touch opus_work/consssa/input/002400050010_jmx1.trigger
	/bin/touch opus_work/consssa/input/002400050010_jmx2.trigger
	/bin/touch opus_work/consssa/input/002400050010_isgri.trigger
	/bin/touch opus_work/consssa/input/002400050010_picsit.trigger
	
	/bin/touch opus_work/consssa/input/002500010010_omc.trigger
	/bin/touch opus_work/consssa/input/002500010010_jmx1.trigger
	/bin/touch opus_work/consssa/input/002500010010_jmx2.trigger
	/bin/touch opus_work/consssa/input/002500010010_isgri.trigger
	/bin/touch opus_work/consssa/input/002500010010_picsit.trigger

endif	#	if ( ! $?DO_NOT_RECREATE_DATA ) then


######################################################################
#  Now we're ready to run:
#
#  Find out what data should be run by looking in OPUS_WORK/consssa/input

echo "#######     Looping over triggers in opus_work/consssa/input"
/bin/ls -1 opus_work/consssa/input/*

foreach trigger (`/bin/ls opus_work/consssa/input/* | /bin/awk -F. '{print $1}' | /bin/awk -F/ '{print $4}' | /bin/sort`)
	echo "###############################################################################"
	echo "######"
	echo "######  RUNNING:  opus_wrapper on pipeline consssa for science window $trigger"
	echo "######"
	echo "######    You should see no errors"
	echo "######"

	#	testing second scw
	#if ( $trigger == "002400050010" ) then
	#	continue
	#endif
	
	#  Unlike other pipelines, we must control this here;  opus_wrapper isn't
	#   smart enough and it is easier here:
	
	###############################################
	#  So first the startup:
	###############################################
	${ISDC_ENV}/opus/pipeline_lib/opus_wrapper cssst $trigger ${OPUS_WORK}/${trigger}_cssst.log
	@ exit_status = $status 
	echo "#######     exit status from opus_wrapper was $exit_status"
	if ($exit_status > 0) exit 1
	
	###############################################
	#  Now we see what triggers were created:
	###############################################
	echo "#######     Examining OSFs created..."
	set obsosfs =  `osf_test -p consssa.path -pr dataset`
	echo "#######     $obsosfs"
	
	###############################################
	#  Loop over Obs groups, i.e. instruments
	###############################################
	foreach obsosf ($obsosfs) 
		set obsgrp = $obsosf[1]
		echo "#######     Obs group OSF is ${obsgrp}"
		echo "#######     Running cssscw for ${obsgrp}"
		echo "#######     Running 'osf_test -p consssa.path -pr dcf_num -f $obsgrp'"
		set ins = `osf_test -p consssa.path -pr dcf_num -f $obsgrp ` 

		#if (($ins != "JX1") && ($ins != "JX2")) then
		#	continue
		#endif
		#if ( $ins == "ISG" ) continue 
		#if ( $ins == "PIC" ) continue 

		if ($status != 0) exit 1
		eval `/usr/bin/envv set OSF_DCF_NUM $ins`
		echo "#######     OSF_DCF_NUM is $OSF_DCF_NUM"

		${ISDC_ENV}/opus/pipeline_lib/opus_wrapper cssscw $obsgrp ${OPUS_WORK}/${obsgrp}_cssscw.log
		@ exit_status = $status 
		echo "#######     exit status from opus_wrapper was $exit_status"
		if ($exit_status > 0) exit 1
		
		echo "#######     Running cssfin for ${obsgrp}"
		
		${ISDC_ENV}/opus/pipeline_lib/opus_wrapper cssfin $obsgrp ${OPUS_WORK}/${obsgrp}_cssfin.log
		@ exit_status = $status 
		echo "#######     exit status from opus_wrapper was $exit_status"
		if ($exit_status > 0) exit 1
		
	end  # foreach instrument
	
	#  Now we have to clean up the blackboard so that the next trigger sees 
	#   only its realted OSFs:
	foreach osf ( `osf_test -p consssa.path -pr dataset`)
		echo "#######     running 'osf_delete -p consssa.path -f $osf'"
		osf_delete -p consssa.path -f $osf
		if ($status != 0) exit 1
	end
	
end  # foreach trigger

echo "#######     "
echo "###############################################################################"
echo "#######     "
echo "#######     Processing complete.  Moving results to out..."
echo "#######     "

/bin/mkdir -p out
/bin/mv test_data/obs* out

cd out
foreach ogid ( `/bin/ls -d obs_*/s* obs_*/0*/s*` ) 
	/bin/mkdir -p ../test_data/$ogid/logs
	/bin/chmod    +w $ogid
	/bin/chmod -R +w $ogid/logs

	if ( $ogid =~ *spi* ) then
		echo "#######     Moving out $ogid/source_res.fits (potentially different every time)"
		if ( -e $ogid/source_res.fits.gz ) then
			/bin/chmod +w $ogid/source_res.fits.gz
			/bin/mv       $ogid/source_res.fits.gz ../test_data/$ogid/
		else
			echo "#######     NO $ogid/source_res.fits found\!"
		endif
	endif

	echo "#######     Moving out $ogid logs (different every time)"
	/bin/mv $ogid/logs/* ../test_data/$ogid/logs/

	echo "#######     Write-protecting $ogid"
	/bin/chmod -w $ogid
end	#	foreach obs_spi
cd ..

echo "#######     "
echo "#######     ALL DONE"

exit

#	last line
